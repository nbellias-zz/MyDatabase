/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import mydatabase.Attribute;
import mydatabase.Database;
import mydatabase.Entity;
import mydatabase.EntityData;

/**
 *
 * @author nikolaos
 */
public class CreateDatabaseJDialog extends javax.swing.JDialog {

    /**
     * Creates new form CreateDatabaseJDialog
     */
    public CreateDatabaseJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createDbJLabel = new javax.swing.JLabel();
        dbNameJTextField = new javax.swing.JTextField();
        cancelJButton = new javax.swing.JButton();
        okJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create New Database");

        createDbJLabel.setText("Database Name");

        cancelJButton.setText("Cancel");
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        okJButton.setText("OK");
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createDbJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelJButton))
                    .addComponent(dbNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createDbJLabel)
                    .addComponent(dbNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelJButton)
                    .addComponent(okJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okJButtonActionPerformed
        // TODO add your handling code here:
        Database db = new Database();
        String dbName = this.dbNameJTextField.getText().replaceAll("[^a-zA-Z]", "").toLowerCase();
        if (db.createDatabaseGUI(dbName)) {
            JOptionPane.showMessageDialog(this, "Succesfully created database with name " + dbName + " !");
            MainFrame mainFrm = (MainFrame) this.getParent();
            DefaultMutableTreeNode root = new DefaultMutableTreeNode(dbName);

            //create the tree by passing in the root node
            JTree tree = new JTree(root);
            tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
            tree.addTreeSelectionListener(new TreeSelectionListener() {
                @Override
                public void valueChanged(TreeSelectionEvent e) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();

                    /* if nothing is selected */
                    if (node == null) {
                        return;
                    }

                    /* retrieve the node that was selected */
                    Object nodeInfo = node.getUserObject();

                    /* React to the node selection. */
                    if (nodeInfo.equals(dbName)) {
                        CreateEntityJDialog createEntityJDialog = new CreateEntityJDialog(mainFrm, true);
                        createEntityJDialog.setLocationRelativeTo(mainFrm);
                        createEntityJDialog.getDatabaseNameJTextField().setText(dbName);
                        createEntityJDialog.setVisible(true);
                    }
                }
            });

            tree.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 1) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                        if (node == null) {
                            return;
                        }
                        Object nodeInfo = node.getUserObject();
                        // Cast nodeInfo to your object and do whatever you want
                        //EntityJPanel
                        EntityJPanel ejp = new EntityJPanel();
                        JTextField entity = ejp.getEntityNameJTextField();
                        entity.setText(nodeInfo.toString());
                        JTable attributes = ejp.getAttributeJTable();
                        Entity ent = db.fetchDatabaseEntityByNameGUI(dbName, nodeInfo.toString());
                        //Populate JTable
                        for (Attribute attr : ent.getAttributes()) {
                            TableColumn dataTypeColumn = attributes.getColumnModel().getColumn(1);
                            DefaultTableModel tableModel = (DefaultTableModel) attributes.getModel();
                            JComboBox comboBox = new JComboBox();
                            comboBox.addItem("Number");
                            comboBox.addItem("Varchar");
                            comboBox.addItem("Boolean");
                            comboBox.addItem("Date");
                            dataTypeColumn.setCellEditor(new DefaultCellEditor(comboBox));
                            tableModel.addRow(new Object[]{attr.getName(), attr.getDataType().getName(), attr.getSize()});
                        }
                        //DataJPanel
                        DataJPanel djp = new DataJPanel();
                        djp.setDbName(dbName);
                        djp.setEntity(ent);
                        JTable data = djp.getEntityDataJTable();
                        //Generate columns from entity attributes
                        DefaultTableModel tableModel = new DefaultTableModel();
                        for (Attribute attr : ent.getAttributes()) {
                            tableModel.addColumn(attr.getName());
                        }
                        data.setModel(tableModel);

                        //Populate entityDataJTable
                        List<EntityData> entData = db.fetchDatabaseEntityDataGUI(dbName, nodeInfo.toString());
                        djp.setEntData(entData);
                        for (EntityData entityData : entData) {
                            DefaultTableModel tm = (DefaultTableModel) data.getModel();
                            tm.addRow(entityData.getRecord().toArray());
                        }
                        //Show jtables in tabbedpanes
                        JTabbedPane dbDetailsJTabbedPane = mainFrm.getDbDetailsJTabbedPane();
                        dbDetailsJTabbedPane.removeAll();
                        dbDetailsJTabbedPane.add("Entity", ejp);
                        dbDetailsJTabbedPane.add("Data", djp);
                    }
                }
            });

            JScrollPane jScrollPane = mainFrm.getDbObjectsTreeJScrollPane();
            jScrollPane.setViewportView(tree);
            JTabbedPane jTabbedPane = mainFrm.getDbDetailsJTabbedPane();
            jTabbedPane.removeAll();
            jTabbedPane.setVisible(true);
            JSplitPane jSplitPane = mainFrm.getMainJSplitPane();
            jSplitPane.setDividerLocation(200);
        } else {
            JOptionPane.showMessageDialog(this, "Could not create database with name " + dbName + "...",
                    "Database exists or other error",
                    JOptionPane.ERROR_MESSAGE);
        }
        this.dispose();
    }//GEN-LAST:event_okJButtonActionPerformed

    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelJButton;
    private javax.swing.JLabel createDbJLabel;
    private javax.swing.JTextField dbNameJTextField;
    private javax.swing.JButton okJButton;
    // End of variables declaration//GEN-END:variables
}
