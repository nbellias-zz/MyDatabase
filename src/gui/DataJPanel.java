/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mydatabase.Attribute;
import mydatabase.Database;
import mydatabase.Entity;
import mydatabase.EntityData;

/**
 *
 * @author nikolaos
 */
public class DataJPanel extends javax.swing.JPanel {

    private Entity entity;
    private List<EntityData> entData;
    private Object[] newTuple;
    private String dbName;
    private int selectedRow;
    private boolean insertMode;

    /**
     * Creates new form DataJPanel
     */
    public DataJPanel() {
        initComponents();
    }

    public String getDbName() {
        return dbName;
    }

    public void setDbName(String dbName) {
        this.dbName = dbName;
    }

    public Entity getEntity() {
        return entity;
    }

    public void setEntity(Entity entity) {
        this.entity = entity;
    }

    public List<EntityData> getEntData() {
        return entData;
    }

    public void setEntData(List<EntityData> entData) {
        this.entData = entData;
    }

    public JTable getEntityDataJTable() {
        return entityDataJTable;
    }

    public void setEntityDataJTable(JTable entityDataJTable) {
        this.entityDataJTable = entityDataJTable;
    }

    private void reloadEntityData() {
        //Re-Populate entityDataJTable
        DefaultTableModel tm = (DefaultTableModel) this.entityDataJTable.getModel();
        tm.setRowCount(0); // delete all rows
        Database db = new Database();
        List<EntityData> entityDataList = db.fetchDatabaseEntityDataGUI(this.dbName, this.entity.getName());
        for (EntityData entityData : entityDataList) {
            tm.addRow(entityData.getRecord().toArray());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityDataJScrollPane = new javax.swing.JScrollPane();
        entityDataJTable = new javax.swing.JTable();
        buttonJPanel = new javax.swing.JPanel();
        newRecordJButton = new javax.swing.JButton();
        deleteRecordJButton = new javax.swing.JButton();
        messagesJLabel = new javax.swing.JLabel();
        saveJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        entityDataJTable.setAutoCreateRowSorter(true);
        entityDataJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        entityDataJTable.setColumnSelectionAllowed(true);
        entityDataJTable.getTableHeader().setReorderingAllowed(false);
        entityDataJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                entityDataJTableMouseClicked(evt);
            }
        });
        entityDataJScrollPane.setViewportView(entityDataJTable);
        entityDataJTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        add(entityDataJScrollPane, java.awt.BorderLayout.CENTER);

        newRecordJButton.setText("New");
        newRecordJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRecordJButtonActionPerformed(evt);
            }
        });

        deleteRecordJButton.setText("Delete");
        deleteRecordJButton.setEnabled(false);
        deleteRecordJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecordJButtonActionPerformed(evt);
            }
        });

        saveJButton.setText("Save");
        saveJButton.setEnabled(false);
        saveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonJPanelLayout = new javax.swing.GroupLayout(buttonJPanel);
        buttonJPanel.setLayout(buttonJPanelLayout);
        buttonJPanelLayout.setHorizontalGroup(
            buttonJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messagesJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(buttonJPanelLayout.createSequentialGroup()
                        .addComponent(newRecordJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRecordJButton)
                        .addGap(0, 354, Short.MAX_VALUE)))
                .addContainerGap())
        );

        buttonJPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteRecordJButton, newRecordJButton});

        buttonJPanelLayout.setVerticalGroup(
            buttonJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newRecordJButton)
                    .addComponent(deleteRecordJButton)
                    .addComponent(saveJButton))
                .addGap(18, 18, 18)
                .addComponent(messagesJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(buttonJPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void newRecordJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRecordJButtonActionPerformed
        // TODO add your handling code here:
        newTuple = new Object[this.entity.getAttributes().size()];
        // TABLE RELATION EMBEDDED OBJECT
        Database db = new Database();
        int colNum = 0;
        for(Attribute attr: this.entity.getAttributes()){
            if(!(attr.getDataType().getName().equals("Number") || attr.getDataType().getName().equals("Varchar") || attr.getDataType().getName().equals("Boolean") || attr.getDataType().getName().equals("Date"))){
                TableColumn dataTypeColumn = this.entityDataJTable.getColumnModel().getColumn(colNum);
                JComboBox comboBox = new JComboBox();
                List<EntityData> entDataList = db.fetchDatabaseEntityDataGUI(this.dbName, attr.getName()); //Attribute that corrsponds to another entity
                for(EntityData entityData: entDataList){
                    comboBox.addItem(entityData.getRecord());
                }
                dataTypeColumn.setCellEditor(new DefaultCellEditor(comboBox));
            }
            ++colNum;
        }
        //
        DefaultTableModel tableModel = (DefaultTableModel) this.entityDataJTable.getModel();
        tableModel.addRow(newTuple);
        this.insertMode = true;
        this.saveJButton.setEnabled(true);
        this.newRecordJButton.setEnabled(false);
        this.deleteRecordJButton.setEnabled(false);
    }//GEN-LAST:event_newRecordJButtonActionPerformed

    private void entityDataJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_entityDataJTableMouseClicked
        // TODO add your handling code here:
        // TABLE RELATION EMBEDDED OBJECT
        Database db = new Database();
        int colNum = 0;
        for(Attribute attr: this.entity.getAttributes()){
            if(!(attr.getDataType().getName().equals("Number") || attr.getDataType().getName().equals("Varchar") || attr.getDataType().getName().equals("Boolean") || attr.getDataType().getName().equals("Date"))){
                TableColumn dataTypeColumn = this.entityDataJTable.getColumnModel().getColumn(colNum);
                JComboBox comboBox = new JComboBox();
                List<EntityData> entDataList = db.fetchDatabaseEntityDataGUI(this.dbName, attr.getName()); //Attribute that corrsponds to another entity
                //System.out.println("DATA FROM ENTITY ATTRIBUTE " + entDataList);
                for(EntityData entityData: entDataList){
                    comboBox.addItem(entityData.getRecord());
                }
                dataTypeColumn.setCellEditor(new DefaultCellEditor(comboBox));
            }
            ++colNum;
        }
        //
        this.newTuple = new Object[this.entity.getAttributes().size()];
        this.saveJButton.setEnabled(true);
        this.selectedRow = this.entityDataJTable.rowAtPoint(evt.getPoint());

        this.newRecordJButton.setEnabled(false);
        this.saveJButton.setEnabled(true);
        if (insertMode) {
            this.deleteRecordJButton.setEnabled(false);
        } else {
            this.deleteRecordJButton.setEnabled(true);
        }
    }//GEN-LAST:event_entityDataJTableMouseClicked

    private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJButtonActionPerformed
        // TODO add your handling code here:
        if (this.entityDataJTable.isEditing()) {
            this.entityDataJTable.getCellEditor().stopCellEditing();
        }
        DefaultTableModel tableModel = (DefaultTableModel) this.entityDataJTable.getModel();
        for (int column = 0; column < this.entityDataJTable.getColumnCount(); column++) {
            this.newTuple[column] = tableModel.getValueAt(this.selectedRow, column);
        }
        Database database = new Database();
        int insertUpdateDelete = 0;
        if (insertMode) {
            insertUpdateDelete = 1; //INSERT
        } else {
            insertUpdateDelete = 2; //UPDATE
        }
        if (database.storeEntityRecordGUI(this.dbName, this.entity, this.newTuple, insertUpdateDelete)) {
            this.reloadEntityData();
            JOptionPane.showMessageDialog(this, "Record Succesfully saved!");
        } else {
            JOptionPane.showMessageDialog(this, "Could not save record...",
                    "Try again",
                    JOptionPane.ERROR_MESSAGE);
        }
        insertMode = false;
        this.newRecordJButton.setEnabled(true);
        this.saveJButton.setEnabled(false);
        this.deleteRecordJButton.setEnabled(false);
    }//GEN-LAST:event_saveJButtonActionPerformed

    private void deleteRecordJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecordJButtonActionPerformed
        // TODO add your handling code here:
        if (this.entityDataJTable.isEditing()) {
            this.entityDataJTable.getCellEditor().stopCellEditing();
        }
        DefaultTableModel tableModel = (DefaultTableModel) this.entityDataJTable.getModel();
        for (int column = 0; column < this.entityDataJTable.getColumnCount(); column++) {
            this.newTuple[column] = tableModel.getValueAt(this.selectedRow, column);
        }
        Database database = new Database();
        if (database.storeEntityRecordGUI(this.dbName, this.entity, this.newTuple, 3)) { // delete record
            this.reloadEntityData();
            JOptionPane.showMessageDialog(this, "Record Succesfully Deleted!");
        } else {
            JOptionPane.showMessageDialog(this, "Could not delete record...",
                    "Try again",
                    JOptionPane.ERROR_MESSAGE);
        }
        insertMode = false;
        this.newRecordJButton.setEnabled(true);
        this.saveJButton.setEnabled(false);
        this.deleteRecordJButton.setEnabled(false);
    }//GEN-LAST:event_deleteRecordJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonJPanel;
    private javax.swing.JButton deleteRecordJButton;
    private javax.swing.JScrollPane entityDataJScrollPane;
    private javax.swing.JTable entityDataJTable;
    private javax.swing.JLabel messagesJLabel;
    private javax.swing.JButton newRecordJButton;
    private javax.swing.JButton saveJButton;
    // End of variables declaration//GEN-END:variables
}
